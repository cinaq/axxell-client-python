# coding: utf-8

"""
    axxell-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Event(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, creation_time=None, event_type=None, event_id=None, event_time=None, entity_type=None, entity_id=None, target_entity_type=None, target_entity_id=None, body=None):
        """
        Event - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'creation_time': 'str',
            'event_type': 'str',
            'event_id': 'str',
            'event_time': 'str',
            'entity_type': 'str',
            'entity_id': 'str',
            'target_entity_type': 'str',
            'target_entity_id': 'str',
            'body': 'str'
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'event_type': 'eventType',
            'event_id': 'eventId',
            'event_time': 'eventTime',
            'entity_type': 'entityType',
            'entity_id': 'entityId',
            'target_entity_type': 'targetEntityType',
            'target_entity_id': 'targetEntityId',
            'body': 'body'
        }

        self._creation_time = creation_time
        self._event_type = event_type
        self._event_id = event_id
        self._event_time = event_time
        self._entity_type = entity_type
        self._entity_id = entity_id
        self._target_entity_type = target_entity_type
        self._target_entity_id = target_entity_id
        self._body = body


    @property
    def creation_time(self):
        """
        Gets the creation_time of this Event.
        Read-only

        :return: The creation_time of this Event.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this Event.
        Read-only

        :param creation_time: The creation_time of this Event.
        :type: str
        """

        self._creation_time = creation_time

    @property
    def event_type(self):
        """
        Gets the event_type of this Event.
        Type of event, consumer cannot set recommend

        :return: The event_type of this Event.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this Event.
        Type of event, consumer cannot set recommend

        :param event_type: The event_type of this Event.
        :type: str
        """
        allowed_values = ["view", "purchase", "recommend"]
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def event_id(self):
        """
        Gets the event_id of this Event.
        Read-only

        :return: The event_id of this Event.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """
        Sets the event_id of this Event.
        Read-only

        :param event_id: The event_id of this Event.
        :type: str
        """

        self._event_id = event_id

    @property
    def event_time(self):
        """
        Gets the event_time of this Event.
        Read-only

        :return: The event_time of this Event.
        :rtype: str
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """
        Sets the event_time of this Event.
        Read-only

        :param event_time: The event_time of this Event.
        :type: str
        """

        self._event_time = event_time

    @property
    def entity_type(self):
        """
        Gets the entity_type of this Event.
        Read-only

        :return: The entity_type of this Event.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this Event.
        Read-only

        :param entity_type: The entity_type of this Event.
        :type: str
        """

        self._entity_type = entity_type

    @property
    def entity_id(self):
        """
        Gets the entity_id of this Event.
        The user that triggered this event. You are free to choose whatever you like but it has to be consistent. Good examples are email address, internal user id or sha256 hash of these values.

        :return: The entity_id of this Event.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this Event.
        The user that triggered this event. You are free to choose whatever you like but it has to be consistent. Good examples are email address, internal user id or sha256 hash of these values.

        :param entity_id: The entity_id of this Event.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def target_entity_type(self):
        """
        Gets the target_entity_type of this Event.
        Read-only

        :return: The target_entity_type of this Event.
        :rtype: str
        """
        return self._target_entity_type

    @target_entity_type.setter
    def target_entity_type(self, target_entity_type):
        """
        Sets the target_entity_type of this Event.
        Read-only

        :param target_entity_type: The target_entity_type of this Event.
        :type: str
        """

        self._target_entity_type = target_entity_type

    @property
    def target_entity_id(self):
        """
        Gets the target_entity_id of this Event.
        Way to identify your product. Use the product id from your shop

        :return: The target_entity_id of this Event.
        :rtype: str
        """
        return self._target_entity_id

    @target_entity_id.setter
    def target_entity_id(self, target_entity_id):
        """
        Sets the target_entity_id of this Event.
        Way to identify your product. Use the product id from your shop

        :param target_entity_id: The target_entity_id of this Event.
        :type: str
        """

        self._target_entity_id = target_entity_id

    @property
    def body(self):
        """
        Gets the body of this Event.
        Meta information that doesn't fit into above fields. Read-only

        :return: The body of this Event.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this Event.
        Meta information that doesn't fit into above fields. Read-only

        :param body: The body of this Event.
        :type: str
        """

        self._body = body

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
