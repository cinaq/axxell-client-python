# coding: utf-8

"""
    axxell-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Store(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, email=None, api_key=None, password=None, salt=None, store_id=None):
        """
        Store - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'email': 'str',
            'api_key': 'str',
            'password': 'str',
            'salt': 'str',
            'store_id': 'str'
        }

        self.attribute_map = {
            'email': 'email',
            'api_key': 'apiKey',
            'password': 'password',
            'salt': 'salt',
            'store_id': 'storeId'
        }

        self._email = email
        self._api_key = api_key
        self._password = password
        self._salt = salt
        self._store_id = store_id


    @property
    def email(self):
        """
        Gets the email of this Store.
        Username/email used to login. Set this during registration.

        :return: The email of this Store.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Store.
        Username/email used to login. Set this during registration.

        :param email: The email of this Store.
        :type: str
        """

        self._email = email

    @property
    def api_key(self):
        """
        Gets the api_key of this Store.
        Also known as secret key. Read-only

        :return: The api_key of this Store.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """
        Sets the api_key of this Store.
        Also known as secret key. Read-only

        :param api_key: The api_key of this Store.
        :type: str
        """

        self._api_key = api_key

    @property
    def password(self):
        """
        Gets the password of this Store.
        The password required to login. Set this during registration.

        :return: The password of this Store.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this Store.
        The password required to login. Set this during registration.

        :param password: The password of this Store.
        :type: str
        """

        self._password = password

    @property
    def salt(self):
        """
        Gets the salt of this Store.
        Internal use

        :return: The salt of this Store.
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """
        Sets the salt of this Store.
        Internal use

        :param salt: The salt of this Store.
        :type: str
        """

        self._salt = salt

    @property
    def store_id(self):
        """
        Gets the store_id of this Store.
        Also known as access key. Read-only

        :return: The store_id of this Store.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """
        Sets the store_id of this Store.
        Also known as access key. Read-only

        :param store_id: The store_id of this Store.
        :type: str
        """

        self._store_id = store_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
