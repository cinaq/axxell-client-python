# coding: utf-8

"""
    axxell-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ErrorResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, message=None, timestamp=None, status=None, error=None, exception=None, path=None):
        """
        ErrorResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'message': 'str',
            'timestamp': 'str',
            'status': 'int',
            'error': 'str',
            'exception': 'str',
            'path': 'str'
        }

        self.attribute_map = {
            'message': 'message',
            'timestamp': 'timestamp',
            'status': 'status',
            'error': 'error',
            'exception': 'exception',
            'path': 'path'
        }

        self._message = message
        self._timestamp = timestamp
        self._status = status
        self._error = error
        self._exception = exception
        self._path = path


    @property
    def message(self):
        """
        Gets the message of this ErrorResponse.


        :return: The message of this ErrorResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ErrorResponse.


        :param message: The message of this ErrorResponse.
        :type: str
        """

        self._message = message

    @property
    def timestamp(self):
        """
        Gets the timestamp of this ErrorResponse.


        :return: The timestamp of this ErrorResponse.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this ErrorResponse.


        :param timestamp: The timestamp of this ErrorResponse.
        :type: str
        """

        self._timestamp = timestamp

    @property
    def status(self):
        """
        Gets the status of this ErrorResponse.


        :return: The status of this ErrorResponse.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ErrorResponse.


        :param status: The status of this ErrorResponse.
        :type: int
        """

        self._status = status

    @property
    def error(self):
        """
        Gets the error of this ErrorResponse.


        :return: The error of this ErrorResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this ErrorResponse.


        :param error: The error of this ErrorResponse.
        :type: str
        """

        self._error = error

    @property
    def exception(self):
        """
        Gets the exception of this ErrorResponse.


        :return: The exception of this ErrorResponse.
        :rtype: str
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """
        Sets the exception of this ErrorResponse.


        :param exception: The exception of this ErrorResponse.
        :type: str
        """

        self._exception = exception

    @property
    def path(self):
        """
        Gets the path of this ErrorResponse.


        :return: The path of this ErrorResponse.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this ErrorResponse.


        :param path: The path of this ErrorResponse.
        :type: str
        """

        self._path = path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
